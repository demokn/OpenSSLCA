# http重定向到https
server {
    listen 80;
    server_name www.example.com;

    return 301 https://$host$request_uri;
}

# 常用的H5配置
server {
    listen 443 ssl;
    server_name www.example.com;

    root  /data/www/wwwroot/www.example.com/dist;
    index index.html;

    access_log /data/log/nginx/www.example.com-access.log;
    error_log  /data/log/nginx/www.example.com-error.log error;

    charset utf-8;

    ssl on;
    ssl_certificate     certs/server.cert.pem;
    ssl_certificate_key certs/server.key.pem;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    ssl_verify_client on;
    ssl_client_certificate certs/intermediateca-chain.cert.pem;
    ssl_verify_depth 2;
    #ssl_crl /data/www/openssl-selfsign/ca/crl.pem;

    location / {
		# 完全禁用缓存, VUE只会在首次访问时加载静态资源, 所以对性能几乎无影响
		#add_header Last-Modified $date_gmt;
		#add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
		#if_modified_since off;
		#expires off;
		#etag off;

		# 按顺序检查文件是否存在, 返回第一个找到的文件或文件夹
		# 如果找不到, 则进行一个内部重定向到最后一个参数
        try_files $uri $uri/ /index.html;
    }
}

# 常用的PHP配置
server {
    listen 443 ssl;
    server_name www.example.com;

    root  /data/www/wwwroot/www.example.com/public;
    index index.html index.htm index.php;

    charset utf-8;
    sendfile off;
    client_max_body_size 100m;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    access_log /data/log/nginx/www.example.com-access.log;
    error_log  /data/log/nginx/www.example.com-error.log error;

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		# 客户端证书认证的相关信息可以传递给PHP
		# 支持的参数参考文档 http://nginx.org/en/docs/http/ngx_http_ssl_module.html#variables
		fastcgi_param VERIFIED        $ssl_client_verify;
        fastcgi_param SSL_DN          $ssl_client_s_dn;

        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
    }

    location ~ /\.ht {
        deny all;
    }

    ssl on;
    ssl_certificate     certs/server.cert.pem;
    ssl_certificate_key certs/server.key.pem;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    ssl_verify_client on;
    ssl_client_certificate certs/intermediateca-chain.cert.pem;
    ssl_verify_depth 2;
    #ssl_crl certs/crl.pem;
}

